
//DON'T MODIFY, AUTOGENERATED CODE HERE (25.02.2020 07:49)

namespace Ecs.Pool
{
    public class AIPool : BasePool<Game.AI>
    {
		protected override Game.AI createNew()
		{
			return new Game.AI();
		}

        protected override void reset(Game.AI obj)
        {
			obj.idleTime = default(System.Single);
			obj.walkDist = default(System.Single);
			obj.walkSpeed = default(System.Single);
        }
    }

	public class AttackPool : BasePool<Game.Attack>
    {
		protected override Game.Attack createNew()
		{
			return new Game.Attack();
		}

        protected override void reset(Game.Attack obj)
        {
			obj.dmg = default(System.Single);
			obj.speed = default(System.Single);
        }
    }

	public class BotIdlePool : BasePool<Game.BotIdle>
    {
		protected override Game.BotIdle createNew()
		{
			return new Game.BotIdle();
		}

        protected override void reset(Game.BotIdle obj)
        {
			obj.time2walk = default(System.Single);
        }
    }

	public class BotWalkPool : BasePool<Game.BotWalk>
    {
		protected override Game.BotWalk createNew()
		{
			return new Game.BotWalk();
		}

        protected override void reset(Game.BotWalk obj)
        {
			obj.from = default(UnityEngine.Vector3);
        }
    }

	public class CellPool : BasePool<Game.Cell>
    {
		protected override Game.Cell createNew()
		{
			return new Game.Cell();
		}

        protected override void reset(Game.Cell obj)
        {
			obj.type = default(Game.LayerType);
			obj.size = default(UnityEngine.Vector3);
        }
    }

	public class CoinPool : BasePool<Game.Coin>
    {
		protected override Game.Coin createNew()
		{
			return new Game.Coin();
		}

        protected override void reset(Game.Coin obj)
        {
			obj.value = default(System.Int32);
        }
    }

	public class CooldownPool : BasePool<Game.Cooldown>
    {
		protected override Game.Cooldown createNew()
		{
			return new Game.Cooldown();
		}

        protected override void reset(Game.Cooldown obj)
        {
			obj.time2end = default(System.Single);
        }
    }

	public class DamagePool : BasePool<Game.Damage>
    {
		protected override Game.Damage createNew()
		{
			return new Game.Damage();
		}

        protected override void reset(Game.Damage obj)
        {
			obj.value = default(System.Single);
			obj.side = default(System.Int32);
        }
    }

	public class DoorPool : BasePool<Game.Door>
    {
		protected override Game.Door createNew()
		{
			return new Game.Door();
		}

        protected override void reset(Game.Door obj)
        {
			obj.isOpen = default(System.Boolean);
        }
    }

	public class HealthPool : BasePool<Game.Health>
    {
		protected override Game.Health createNew()
		{
			return new Game.Health();
		}

        protected override void reset(Game.Health obj)
        {
			obj.value = default(System.Single);
			obj.max = default(System.Single);
        }
    }

	public class HitPool : BasePool<Game.Hit>
    {
		protected override Game.Hit createNew()
		{
			return new Game.Hit();
		}

        protected override void reset(Game.Hit obj)
        {
			obj.dmg = default(System.Single);
			obj.kill = default(System.Boolean);
        }
    }

	public class IdentityPool : BasePool<Game.Identity>
    {
		protected override Game.Identity createNew()
		{
			return new Game.Identity();
		}

        protected override void reset(Game.Identity obj)
        {
			obj.id = default(System.String);
			obj.side = default(System.Int32);
        }
    }

	public class LookPool : BasePool<Game.Look>
    {
		protected override Game.Look createNew()
		{
			return new Game.Look();
		}

        protected override void reset(Game.Look obj)
        {
			obj.direction = default(UnityEngine.Vector3);
        }
    }

	public class ModelPool : BasePool<Game.Model>
    {
		protected override Game.Model createNew()
		{
			return new Game.Model();
		}

        protected override void reset(Game.Model obj)
        {
			obj.name = default(System.String);
			obj.created = default(System.Boolean);
        }
    }

	public class MovePool : BasePool<Game.Move>
    {
		protected override Game.Move createNew()
		{
			return new Game.Move();
		}

        protected override void reset(Game.Move obj)
        {
			obj.speed = default(System.Single);
			obj.direction = default(UnityEngine.Vector3);
        }
    }

	public class PositionPool : BasePool<Game.Position>
    {
		protected override Game.Position createNew()
		{
			return new Game.Position();
		}

        protected override void reset(Game.Position obj)
        {
			obj.value = default(UnityEngine.Vector3);
        }
    }
}